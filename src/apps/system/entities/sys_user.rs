//! SeaORM Entity. Generated by sea-orm-codegen 0.3.2

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Copy, Clone, Default, Debug, DeriveEntity)]
pub struct Entity;

impl EntityName for Entity {
    fn table_name(&self) -> &str {
        "sys_user"
    }
}

#[derive(Clone, Debug, PartialEq, DeriveModel, DeriveActiveModel, Serialize, Deserialize)]
pub struct Model {
    pub id: String,
    pub user_name: String,
    pub mobile: String,
    pub user_nickname: String,
    pub birthday: i32,
    pub user_password: String,
    pub user_salt: String,
    pub user_status: i8,
    pub user_email: String,
    pub sex: i8,
    pub avatar: String,
    pub dept_id: String,
    pub remark: String,
    pub is_admin: i8,
    pub address: String,
    pub describe: String,
    pub phone_num: String,
    pub last_login_ip: String,
    pub last_login_time: Option<DateTime>,
    pub created_at: Option<DateTime>,
    pub updated_at: Option<DateTime>,
    pub deleted_at: Option<DateTime>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveColumn)]
pub enum Column {
    Id,
    UserName,
    Mobile,
    UserNickname,
    Birthday,
    UserPassword,
    UserSalt,
    UserStatus,
    UserEmail,
    Sex,
    Avatar,
    DeptId,
    Remark,
    IsAdmin,
    Address,
    Describe,
    PhoneNum,
    LastLoginIp,
    LastLoginTime,
    CreatedAt,
    UpdatedAt,
    DeletedAt,
}

#[derive(Copy, Clone, Debug, EnumIter, DerivePrimaryKey)]
pub enum PrimaryKey {
    Id,
}

impl PrimaryKeyTrait for PrimaryKey {
    type ValueType = String;
    fn auto_increment() -> bool {
        false
    }
}

#[derive(Copy, Clone, Debug, EnumIter)]
pub enum Relation {}

impl ColumnTrait for Column {
    type EntityName = Entity;
    fn def(&self) -> ColumnDef {
        match self {
            Self::Id => ColumnType::String(Some(32u32)).def(),
            Self::UserName => ColumnType::String(Some(60u32)).def().unique(),
            Self::Mobile => ColumnType::String(Some(20u32)).def().unique(),
            Self::UserNickname => ColumnType::String(Some(50u32)).def(),
            Self::Birthday => ColumnType::Integer.def(),
            Self::UserPassword => ColumnType::String(Some(255u32)).def(),
            Self::UserSalt => ColumnType::Char(Some(10u32)).def(),
            Self::UserStatus => ColumnType::TinyInteger.def(),
            Self::UserEmail => ColumnType::String(Some(100u32)).def(),
            Self::Sex => ColumnType::TinyInteger.def(),
            Self::Avatar => ColumnType::String(Some(255u32)).def(),
            Self::DeptId => ColumnType::Char(Some(32u32)).def(),
            Self::Remark => ColumnType::String(Some(255u32)).def(),
            Self::IsAdmin => ColumnType::TinyInteger.def(),
            Self::Address => ColumnType::String(Some(255u32)).def(),
            Self::Describe => ColumnType::String(Some(255u32)).def(),
            Self::PhoneNum => ColumnType::String(Some(20u32)).def(),
            Self::LastLoginIp => ColumnType::String(Some(15u32)).def(),
            Self::LastLoginTime => ColumnType::DateTime.def().null(),
            Self::CreatedAt => ColumnType::DateTime.def().null(),
            Self::UpdatedAt => ColumnType::DateTime.def().null(),
            Self::DeletedAt => ColumnType::DateTime.def().null(),
        }
    }
}

impl RelationTrait for Relation {
    fn def(&self) -> RelationDef {
        match self {
            _ => panic!("No RelationDef"),
        }
    }
}

impl ActiveModelBehavior for ActiveModel {}
