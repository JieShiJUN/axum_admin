//! SeaORM Entity. Generated by sea-orm-codegen 0.3.2

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Copy, Clone, Default, Debug, DeriveEntity)]
pub struct Entity;

impl EntityName for Entity {
    fn table_name(&self) -> &str {
        "sys_job"
    }
}

#[derive(Clone, Debug, PartialEq, DeriveModel, DeriveActiveModel, Serialize, Deserialize)]
pub struct Model {
    pub job_id: String,
    pub job_name: String,
    pub job_params: Option<String>,
    pub job_group: String,
    pub invoke_target: String,
    pub cron_expression: Option<String>,
    pub misfire_policy: Option<i8>,
    pub concurrent: Option<i8>,
    pub status: Option<i8>,
    pub create_by: Option<String>,
    pub update_by: Option<String>,
    pub remark: Option<String>,
    pub created_at: Option<DateTime>,
    pub updated_at: Option<DateTime>,
    pub deleted_at: Option<DateTime>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveColumn)]
pub enum Column {
    JobId,
    JobName,
    JobParams,
    JobGroup,
    InvokeTarget,
    CronExpression,
    MisfirePolicy,
    Concurrent,
    Status,
    CreateBy,
    UpdateBy,
    Remark,
    CreatedAt,
    UpdatedAt,
    DeletedAt,
}

#[derive(Copy, Clone, Debug, EnumIter, DerivePrimaryKey)]
pub enum PrimaryKey {
    JobId,
    JobName,
    JobGroup,
}

impl PrimaryKeyTrait for PrimaryKey {
    type ValueType = (String, String, String);
    fn auto_increment() -> bool {
        false
    }
}

#[derive(Copy, Clone, Debug, EnumIter)]
pub enum Relation {}

impl ColumnTrait for Column {
    type EntityName = Entity;
    fn def(&self) -> ColumnDef {
        match self {
            Self::JobId => ColumnType::String(Some(32u32)).def(),
            Self::JobName => ColumnType::String(Some(64u32)).def(),
            Self::JobParams => ColumnType::String(Some(200u32)).def().null(),
            Self::JobGroup => ColumnType::String(Some(64u32)).def(),
            Self::InvokeTarget => ColumnType::String(Some(500u32)).def(),
            Self::CronExpression => ColumnType::String(Some(255u32)).def().null(),
            Self::MisfirePolicy => ColumnType::TinyInteger.def().null(),
            Self::Concurrent => ColumnType::TinyInteger.def().null(),
            Self::Status => ColumnType::TinyInteger.def().null(),
            Self::CreateBy => ColumnType::String(Some(32u32)).def().null(),
            Self::UpdateBy => ColumnType::Char(Some(32u32)).def().null(),
            Self::Remark => ColumnType::String(Some(500u32)).def().null(),
            Self::CreatedAt => ColumnType::DateTime.def().null(),
            Self::UpdatedAt => ColumnType::DateTime.def().null(),
            Self::DeletedAt => ColumnType::DateTime.def().null(),
        }
    }
}

impl RelationTrait for Relation {
    fn def(&self) -> RelationDef {
        match self {
            _ => panic!("No RelationDef"),
        }
    }
}

impl ActiveModelBehavior for ActiveModel {}
