//! SeaORM Entity. Generated by sea-orm-codegen 0.5.0

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Copy, Clone, Default, Debug, DeriveEntity)]
pub struct Entity;

impl EntityName for Entity {
    fn table_name(&self) -> &str {
        "sys_model_info"
    }
}

#[derive(Clone, Debug, PartialEq, DeriveModel, DeriveActiveModel, Serialize, Deserialize)]
pub struct Model {
    pub model_id: i32,
    pub model_category_id: i32,
    pub model_name: String,
    pub model_title: String,
    pub model_pk: String,
    pub model_order: String,
    pub model_sort: Option<String>,
    pub model_list: Option<String>,
    pub model_edit: Option<String>,
    pub model_indexes: Option<String>,
    pub search_list: Option<String>,
    pub create_time: i64,
    pub update_time: i64,
    pub model_status: i8,
    pub model_engine: String,
    pub create_by: String,
    pub update_by: String,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveColumn)]
pub enum Column {
    ModelId,
    ModelCategoryId,
    ModelName,
    ModelTitle,
    ModelPk,
    ModelOrder,
    ModelSort,
    ModelList,
    ModelEdit,
    ModelIndexes,
    SearchList,
    CreateTime,
    UpdateTime,
    ModelStatus,
    ModelEngine,
    CreateBy,
    UpdateBy,
}

#[derive(Copy, Clone, Debug, EnumIter, DerivePrimaryKey)]
pub enum PrimaryKey {
    ModelId,
}

impl PrimaryKeyTrait for PrimaryKey {
    type ValueType = i32;
    fn auto_increment() -> bool {
        true
    }
}

#[derive(Copy, Clone, Debug, EnumIter)]
pub enum Relation {}

impl ColumnTrait for Column {
    type EntityName = Entity;
    fn def(&self) -> ColumnDef {
        match self {
            Self::ModelId => ColumnType::Integer.def(),
            Self::ModelCategoryId => ColumnType::Integer.def(),
            Self::ModelName => ColumnType::Char(Some(30u32)).def().unique(),
            Self::ModelTitle => ColumnType::Char(Some(30u32)).def(),
            Self::ModelPk => ColumnType::Char(Some(30u32)).def(),
            Self::ModelOrder => ColumnType::Char(Some(30u32)).def(),
            Self::ModelSort => ColumnType::String(Some(255u32)).def().null(),
            Self::ModelList => ColumnType::String(Some(255u32)).def().null(),
            Self::ModelEdit => ColumnType::String(Some(255u32)).def().null(),
            Self::ModelIndexes => ColumnType::String(Some(255u32)).def().null(),
            Self::SearchList => ColumnType::String(Some(255u32)).def().null(),
            Self::CreateTime => ColumnType::BigInteger.def(),
            Self::UpdateTime => ColumnType::BigInteger.def(),
            Self::ModelStatus => ColumnType::TinyInteger.def(),
            Self::ModelEngine => ColumnType::String(Some(25u32)).def(),
            Self::CreateBy => ColumnType::String(Some(32u32)).def(),
            Self::UpdateBy => ColumnType::String(Some(32u32)).def(),
        }
    }
}

impl RelationTrait for Relation {
    fn def(&self) -> RelationDef {
        panic!("No RelationDef")
    }
}

impl ActiveModelBehavior for ActiveModel {}
